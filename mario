#pragma once
#include <SFML/Graphics.hpp>
#include <algorithm>
#include <vector>
#include <string>
#include "collision.h"

using namespace std;

class Mario : public sf::Drawable, public sf::Transformable {
private:
	sf::Texture Texture;
	Collision check;
	sf::Vector2f postion = sf::Vector2f({ 150,132 });
	float acceleration = 2.f, g = 1.f, maxspeed = 4.f, speed = 0, jumppower = -11.3137, maxy, velocityY = 0;
	sf::IntRect stand, moverect[3], jumprect, die,astand,amoves[3],ajump;
public:
	sf::Sprite Marios;
	bool shiled = false,freez=false;
	sf::Clock mclock, jclock,freezc;
	bool ismoving = false, isonground = false, isjumping = false, isalive = true, falling = true, left = true, right = true, canjump = true, adult = false;
	Mario(std::filesystem::path& p) : Marios(Texture) {
		Texture.loadFromFile(p);
		Marios.setPosition({ 10,10 });
		Marios.scale({ 1,1 });
		stand = sf::IntRect({ 0,48 }, { 16,16 });
		moverect[0] = sf::IntRect({ 16,48 }, { 16,15 });
		moverect[1] = sf::IntRect({ 32,48 }, { 16,16 });
		moverect[2] = sf::IntRect({ 48,48 }, { 16,16 });
		jumprect = sf::IntRect({ 64,48 }, { 16,16 });
		astand = sf::IntRect({ 0,0 }, { 16,32 });
		amoves[0] = sf::IntRect({ 16,0 },{16, 32});
		amoves[1] = sf::IntRect({ 32,0 }, { 16,32 });
		amoves[2] = sf::IntRect({ 48,0 }, { 16,32 });
		ajump = sf::IntRect({ 64,0 }, { 16,32 });
		die = sf::IntRect({ 80,48 }, { 16,16 });
	}

	void move() {
		if (isalive&&!freez) {
			if (left && sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Left))L_move();
			if (right && sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Right))R_move();
			if (canjump&&sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Space)) jump();
		}
	}
	void ecollision(gameobject* g) {
		if (g == nullptr)return;
		sf::FloatRect bounds = Marios.getGlobalBounds(),c2=g->bounds();
		char side = ' ';
		bool h = g->getstate();
		if (check.check(bounds, c2, side)) {
			if (side == 'D') {
				if (h == true) {
					isonground = true;
					falling = false;
					jump();
				}
				g->kill();
			}
			else if (g->getstate()) {
				if (adult) {
					jclock.restart();
					mclock.restart();
					freezc.restart();
					freez = true;
					shiled = true;
					adult = false;
				}
				else if (shiled) {
					if (side != 'D') g->setdir(side);
				}
				else isalive = false;
			}
		}
		Marios.setPosition(postion);
	}
	void icollision(Item* g) {
		sf::FloatRect bounds = Marios.getGlobalBounds(),c2=g->bounds();
		char side = ' ';
		if (check.check(bounds, c2, side))g->activ();
	}
	void L_move() {
		Marios.setScale({ -1,1 });
		if (speed < maxspeed) {
			speed += acceleration ;
		}
		else speed = maxspeed;
		ismoving = true;
		postion.x -= speed;
	}
	void R_move() {
		Marios.setScale({ 1,1 });
		if (speed < maxspeed)speed += acceleration ;
		else speed = maxspeed;
		ismoving = true;
		postion.x += speed;
	}
	void jump() {
		if (isonground&&!falling) {
			isjumping = true;
			falling = true;
			isonground = false;
			velocityY = jumppower;
		}
	}
	void stop() {
		if (!ismoving) {
			if (speed > 0)
				speed -= acceleration;
			else if (speed < 0)
				speed += acceleration;
			if (speed == 0) {
				ismoving = false;
			}
		}
		Marios.setPosition(postion);
	}
	void animation() {
		if (isalive) {
			if (isjumping || falling) {
				if (adult)Marios.setTextureRect(ajump);
				else Marios.setTextureRect(jumprect);
			}
			else if (ismoving) {
				if (mclock.getElapsedTime().asMilliseconds() >= 150) {
					static int f = 0;
					if (adult)Marios.setTextureRect(amoves[f]);
					else Marios.setTextureRect(moverect[f]);
					f = (f + 1) % 3;
					mclock.restart();
				}
			}
			else if (!ismoving && !isjumping && !falling) {
				if (adult)Marios.setTextureRect(astand);
				else Marios.setTextureRect(stand);
			}
		}
		else Marios.setTextureRect(die);
	}

	void rightblock(vector<int> map, sf::Vector2u block, sf::Vector2u size) {
		sf::FloatRect bounds = Marios.getGlobalBounds();
		bounds.position.x += bounds.size.x;
		bounds.position.y += 1;
		bounds.size.x = 1.f;
		bounds.size.y -= 2;
		int startx = int(bounds.position.x / block.x);
		int endx = int((bounds.position.x + bounds.size.x) / block.x);
		int starty = int((bounds.position.y) / block.y);
		int endy = int((bounds.position.y + bounds.size.y) / block.y);
		for (int i = startx; i <= endx; i++) {
			for (int j = starty; j <= endy; j++) {
				if (i > 0 && i < size.x && j>0 && j < size.y) {
					if (map[i + j * size.x] < 0)right = true;
					else right = false;
				}
			}
		}
	}
	void leftblock(vector<int> map, sf::Vector2u block, sf::Vector2u size) {
		sf::FloatRect bounds = Marios.getGlobalBounds();
		sf::FloatRect({ bounds.position.x - 1,bounds.position.y  }, { 1.f,bounds.size.y - 2 });
		int startx = bounds.position.x / block.x;
		int endx = (bounds.position.x + bounds.size.x) / block.x;
		int starty = bounds.position.y / block.y;
		int endy = (bounds.position.y + bounds.size.y)/block.y;
		for (int i = startx; i <= endx; i++) {
			for (int j = starty; j <= endy; j++) {
				if (i > 0 && i < size.x && j>0 && j < size.y) {
					if (map[i + j * size.x] < 0)left = true;
					else left = false;
				}
			}
		}
	}
	void upblock(vector<int> map, sf::Vector2u block, sf::Vector2u size) {
		sf::FloatRect bounds = Marios.getGlobalBounds();
		bounds = sf::FloatRect({ bounds.position.x + 1,bounds.position.y - 1 }, { bounds.size.x - 2,1.f });
		int startx = bounds.position.x / block.x;
		int endx = (bounds.position.x + bounds.size.x) / block.x;
		int starty = bounds.position.y / block.y;
		int endy = (bounds.position.y + bounds.size.y) / block.y;
		for (int i = startx; i < endx; i++) {
			for (int j = starty; j < endy; j++) {
				if (i > 0 && i < size.x && j>0 && j < size.y) {
					if (map[i + j * size.x] < 0) {
						canjump = true;
						break;
					}
					else canjump = false;
				}
			}
		}
	}
	void physics( vector<int> map, sf::Vector2u block, sf::Vector2u size) {
		if (isalive&&!freez) {
			if (!isonground|| falling) {
				velocityY += g;
				postion.y += velocityY;
				falling = true;
			}
			else velocityY = 0;
		}
		if (abs(speed)<0.1f)ismoving = false;
		if (!ismoving)stop();
		if (!right)rightblock(map, block, size);
		if (!canjump)upblock(map, block, size);
		if (!left)leftblock(map, block, size);
		hcollison(map, block, size);
		if (Marios.getPosition().y > 232) {
			isalive = false;
		}
		Marios.setPosition(postion);
	}
	void viewupdate(sf::View& v1) {
		if (postion.x > 0 && postion.x < 800 && postion.y >0 && postion.y < 300)v1.setCenter(postion);
	}
	void hcollison(vector<int> map,sf::Vector2u block,sf::Vector2u size) {
		char side = ' ';
		sf::FloatRect c1 = Marios.getGlobalBounds();
		int starx = max(int(c1.position.x / block.x - 1), 0);
		int endx = min(int((c1.position.x + c1.size.x) / block.x) + 1, int(size.x));
		int starty = max(int(c1.position.y / block.y - 1), 0);
		int endy = min(int((c1.position.y + c1.size.y) / block.y) + 1, int(size.y));
		bool touch = false;
		for ( int i =starx ; i < endx; i++) {
			for (int j = starty; j < endy; j++) {
				sf::FloatRect c2 = sf::FloatRect({ i * block.x*1.f,j * block.y*1.f }, { block.x*1.f,block.y*1.f });
				const int tn = map[i + (j * size.x)];
				if (tn >= 0 && check.check(c1, c2, side)) {
					if (side == 'D') {
						velocityY = 0;
						postion.y = c2.position.y - c1.size.y;
						falling = false;
						isjumping = false;
						isonground = true;
						touch = true;
					}
					 else if (side == 'U') {
						canjump = false;
						 velocityY = 0;
						 postion.y = c2.position.y + c2.size.y;
					 }
					if (side == 'R') {
						postion.x = c2.position.x - c1.size.x;
						speed = 0;
						ismoving = false;
						right = false;
					}
					else if (side == 'L') {
						speed = 0;
						left = false;
						postion.x = (c2.position.x + c2.size.x)+c1.size.x;
						ismoving = false;
					}
				}
			}
		}
		if (!touch) {
			int checkStartX = max(int(c1.position.x / block.x), 0);
			int checkEndX = min(int((c1.position.x + c1.size.x) / block.x), int(size.x) - 1);
			int checkY = min(int((c1.position.y + c1.size.y + 1) / block.y), int(size.y) - 1);

			bool anyBlockBelow = false;

			for (int x = checkStartX; x <= checkEndX; x++) {
				int index = x + (checkY * size.x);
				if (index >= 0 && index < map.size() && map[index] >= 0) {
					anyBlockBelow = true;
					break;
				}
			}

			if (!anyBlockBelow) {
				falling = true;
				isonground = false;
			}
		}
	}
	void flash() {
		if (freez) {
			if (freezc.getElapsedTime().asMilliseconds() >= 400 && freez) {
				freez = false;
				if (shiled)adult = false;
				else adult = true;
			}
			if (freez && mclock.getElapsedTime().asMilliseconds() >= 150) {
				mclock.restart();
				adult = !adult;
			}
		}
	}
	void update(sf::View& v1,vector<int> map,sf::Vector2u block,sf::Vector2u size) {
		move();
		physics(map, block, size);
		animation();
		viewupdate(v1);
		//think of that again flash animation;
		if (shiled && jclock.getElapsedTime().asMilliseconds() >= 2000) {
			shiled = false;
		}
		flash();
	}
private:
	virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const override {
		target.draw(Marios, states);
	}
};
